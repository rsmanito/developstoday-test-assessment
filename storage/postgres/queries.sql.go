// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package postgres

import (
	"context"
)

const createCat = `-- name: CreateCat :one
INSERT INTO cats (
  name, years_of_experience, breed, salary
) VALUES ( $1, $2, $3, $4)
RETURNING id, name, years_of_experience, breed, salary
`

type CreateCatParams struct {
	Name              string
	YearsOfExperience int32
	Breed             string
	Salary            int32
}

func (q *Queries) CreateCat(ctx context.Context, arg CreateCatParams) (Cat, error) {
	row := q.db.QueryRow(ctx, createCat,
		arg.Name,
		arg.YearsOfExperience,
		arg.Breed,
		arg.Salary,
	)
	var i Cat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.YearsOfExperience,
		&i.Breed,
		&i.Salary,
	)
	return i, err
}

const deleteCat = `-- name: DeleteCat :execrows
DELETE 
FROM cats
WHERE id = $1
`

func (q *Queries) DeleteCat(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteCat, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getAllCats = `-- name: GetAllCats :many
SELECT id, name, years_of_experience, breed, salary
FROM CATS
`

func (q *Queries) GetAllCats(ctx context.Context) ([]Cat, error) {
	rows, err := q.db.Query(ctx, getAllCats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cat
	for rows.Next() {
		var i Cat
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.YearsOfExperience,
			&i.Breed,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCat = `-- name: GetCat :one
SELECT id, name, years_of_experience, breed, salary
FROM cats 
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCat(ctx context.Context, id int32) (Cat, error) {
	row := q.db.QueryRow(ctx, getCat, id)
	var i Cat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.YearsOfExperience,
		&i.Breed,
		&i.Salary,
	)
	return i, err
}

const updateCatSalary = `-- name: UpdateCatSalary :one
UPDATE cats
SET salary = $2
WHERE id = $1
RETURNING id, name, years_of_experience, breed, salary
`

type UpdateCatSalaryParams struct {
	ID     int32
	Salary int32
}

func (q *Queries) UpdateCatSalary(ctx context.Context, arg UpdateCatSalaryParams) (Cat, error) {
	row := q.db.QueryRow(ctx, updateCatSalary, arg.ID, arg.Salary)
	var i Cat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.YearsOfExperience,
		&i.Breed,
		&i.Salary,
	)
	return i, err
}
